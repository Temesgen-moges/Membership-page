{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useKeycloak } from '@react-keycloak/web';\nimport Imgg from '../assets/img/onee.jpg';\nimport './Login.css';\nimport RegistrationForm from './RegistrationForm';\nimport { httpClient } from './HttpClient'; // Assuming httpClient is correctly implemented\n\nconst Login = () => {\n\n  // const [keycloakInitialized, setKeycloakInitialized] = useState(false);\n  // const { keycloak, initialized } = useKeycloak(); // Destructure initialized property\n\n  // if(!keycloak.authenticated){\n\n  //     console.log(\"user is this :: \");\n  // }\n\n  // /* http client will use this header in every request it sends */\n  // httpClient.defaults.headers.common['Authorization'] = `Bearer ${keycloak.token}`;\n  // useEffect(() => {\n\n  //     console.log(\"user is this :: \", keycloak.isTokenExpired);\n  //     if (initialized && keycloak.authenticated) {\n  //         // Access user information after authentication\n  //         console.log('User ID:', keycloak.idTokenParsed.sub);\n  //         console.log('User Email:', keycloak.idTokenParsed.email);\n  //         // You can access more user information from the idTokenParsed object\n  //     }\n  //     setKeycloakInitialized(true);\n  // }, [initialized, keycloak]);\n\n  // return (\n  //     <>\n  //         <div className='container'>\n  //             <div className='imgContainer'>\n  //                 <img className=\"L-img\" src={Imgg} alt='rectangle' />\n  //             </div>\n  //             <div className='container2'>\n  //                 <p className='login-title' style={{ color: 'grey', marginLeft: '7.3rem', fontSize: '20px' }}>Login Page</p>\n  //                 <div className='buttonContainer'>\n  //                     {/* Hide login/register buttons while Keycloak is initializing */}\n  //                     {keycloakInitialized && (\n  //                         <>\n  //                             <button className=\"bg-transparent log-butt\" onClick={() => keycloak.login()}>Login</button>\n  //                             <button className=\"bg-transparent reg-butt\" onClick={() => keycloak.register()}>Register</button>\n  //                         </>\n  //                     )}\n  //                 </div>\n\n  //                 <p style={{ color: 'orange', fontWeight: 'bold', fontSize: '16px', width: '370px', marginBottom: '37px', textAlign: 'center' }}>\n  //                     {keycloakInitialized && !keycloak.authenticated && 'Welcome'}\n  //                 </p>\n  //             </div>\n  //         </div>\n  //     </>\n  // );\n};\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useKeycloak","Imgg","RegistrationForm","httpClient","Login","_c","$RefreshReg$"],"sources":["/home/wandi/Documents/Personal Projects/Intern Ship/frontend/game/src/Login-signup-pages/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useKeycloak } from '@react-keycloak/web';\nimport Imgg from '../assets/img/onee.jpg';\nimport './Login.css';\nimport RegistrationForm from './RegistrationForm'\nimport { httpClient } from './HttpClient'; // Assuming httpClient is correctly implemented\n\nconst Login = () => {\n\n    // const [keycloakInitialized, setKeycloakInitialized] = useState(false);\n    // const { keycloak, initialized } = useKeycloak(); // Destructure initialized property\n\n    // if(!keycloak.authenticated){\n\n    //     console.log(\"user is this :: \");\n    // }\n\n    // /* http client will use this header in every request it sends */\n    // httpClient.defaults.headers.common['Authorization'] = `Bearer ${keycloak.token}`;\n    // useEffect(() => {\n\n    //     console.log(\"user is this :: \", keycloak.isTokenExpired);\n    //     if (initialized && keycloak.authenticated) {\n    //         // Access user information after authentication\n    //         console.log('User ID:', keycloak.idTokenParsed.sub);\n    //         console.log('User Email:', keycloak.idTokenParsed.email);\n    //         // You can access more user information from the idTokenParsed object\n    //     }\n    //     setKeycloakInitialized(true);\n    // }, [initialized, keycloak]);\n\n    // return (\n    //     <>\n    //         <div className='container'>\n    //             <div className='imgContainer'>\n    //                 <img className=\"L-img\" src={Imgg} alt='rectangle' />\n    //             </div>\n    //             <div className='container2'>\n    //                 <p className='login-title' style={{ color: 'grey', marginLeft: '7.3rem', fontSize: '20px' }}>Login Page</p>\n    //                 <div className='buttonContainer'>\n    //                     {/* Hide login/register buttons while Keycloak is initializing */}\n    //                     {keycloakInitialized && (\n    //                         <>\n    //                             <button className=\"bg-transparent log-butt\" onClick={() => keycloak.login()}>Login</button>\n    //                             <button className=\"bg-transparent reg-butt\" onClick={() => keycloak.register()}>Register</button>\n    //                         </>\n    //                     )}\n    //                 </div>\n\n    //                 <p style={{ color: 'orange', fontWeight: 'bold', fontSize: '16px', width: '370px', marginBottom: '37px', textAlign: 'center' }}>\n    //                     {keycloakInitialized && !keycloak.authenticated && 'Welcome'}\n    //                 </p>\n    //             </div>\n    //         </div>\n    //     </>\n    // );\n};\n\nexport default Login;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAO,aAAa;AACpB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,UAAU,QAAQ,cAAc,CAAC,CAAC;;AAE3C,MAAMC,KAAK,GAAGA,CAAA,KAAM;;EAEhB;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACH;AAACC,EAAA,GAjDID,KAAK;AAmDX,eAAeA,KAAK;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}